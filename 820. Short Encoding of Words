class Solution:

	def minimumLengthEncoding(self, words: List[str]) -> int:
		# hashmap to store all the non repeating words
		store = {}

		# storing all the words in hashmap for faster access O(1)
		for w in words:
			store[w] = 1

		"""
		going through each word and checking if any of the 
		suffix is present as a different word in the initial array
		
		Note: the max length of array `words` = n
		and max length of any word in the array, i.e. `words[i].length` <= 7
		deletion in hashmap worst case complexity: O(n); average/best case: O(1)
		
		Therefore the time complexity would be: O(n * 7 * n) = O(n^2)
		"""
		for w in words:
			for i in range(1, len(w)):
			    # checking if suffix exists in O(1)
				if store.get(w[i:], None):
					# deleting the suffix if it exists: worst case complexity O(n)
					del store[w[i:]]

		# getting the number of elements left in hashmap
		cnt = len(store)

		# getting lenght of each individual element and adding it to the variable
		for k in store.keys():
			cnt += len(k)

		return cnt

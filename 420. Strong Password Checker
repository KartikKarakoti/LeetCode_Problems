class Solution:
    def strongPasswordChecker(self, password: str) -> int:
        n = len(password)
        has_lowercase = any(c.islower() for c in password)
        has_uppercase = any(c.isupper() for c in password)
        has_digit = any(c.isdigit() for c in password)

        missing_types = 3 - (has_lowercase + has_uppercase + has_digit)

        if n < 6:
            return max(missing_types, 6 - n)

        one_mod = two_mod = replace = 0
        i = 2

        while i < n:
            if password[i] == password[i - 1] == password[i - 2]:
                count = 2
                while i < n and password[i] == password[i - 1]:
                    count += 1
                    i += 1
                replace += count // 3
                if count % 3 == 0:
                    one_mod += 1
                elif count % 3 == 1:
                    two_mod += 1
            else:
                i += 1

        if n > 20:
            excess_length = n - 20
            replace -= min(excess_length, one_mod * 1) // 1
            replace -= min(max(excess_length - one_mod, 0), two_mod * 2) // 2
            replace -= max(excess_length - one_mod - 2 * two_mod, 0) // 3
            return excess_length + max(missing_types, replace)

        return max(missing_types, replace)

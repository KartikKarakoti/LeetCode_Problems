class Solution:
    def myPow(self, x: float, n: int) -> float:

        '''
        We will use the recursion technique as the pow is essentially
        the multiplication a number by itself for a given number of times `n`
        '''

        '''
        Constraints:
        - `x` can be either not zero or n > 0
            Means if x == 0 then n will always be greater than 0
            or if x != 0 there is a chance of n being 0
            (This helps us to place an edge condition of if x == 0, return 0)

        - `n` will always be an integer and `x` will be float
        
        '''


        '''
        Optimized solution

        We will do the divide and conquer

        as in brute force, we will multiply the `x` to `n` number of times,
        we will instead divide the `n` to its half recursively and each times, we will get the `x` pow of it 
        '''


        # as per the Constraints, if x is 0 then n will always be > 0
        # so no point in proceeding, so return 0 if input x = 0
        if x == 0:
            return 0



        # let us handle if the n is negative
        
        if n < 0:
            x = 1/x
            n = -n

        
        # exit condition of recursion
        if n == 0:
            return 1
        

        # Compute the power for half of n
        half = self.myPow(x, n//2)

        # optimization (in case of negative `n`):
        # in case of input `n` being negative, when the half reaches 0, then no point in letting the 
        # control to proceed for the next operation as it results to 0 by multiplying anything with 0
        if half == 0:
            return 0.0
        


        # for every sub step(half of the respective `n` at that instance) we will calculate the value and use
        # it for the subsequent iterations

        # if at any instance of the sub step, if the `n` is even then its result will be twice the half
        if n % 2 == 0:
            return half * half

        # the result will have one extra x along with two half as odd number is always one exta of even
        # so multiply the extra x into the result        
        else:
            return half * half * x
        

class Solution:
    def shortestPathLength(self, graph: List[List[int]]) -> int:
        n = len(graph)
        target_mask = (1 << n) - 1

        # Initialize the BFS queue with starting positions (node, state, distance)
        queue = deque((i, 1 << i, 0) for i in range(n))

        # Use a set to keep track of visited nodes with their state
        visited = set((i, 1 << i) for i in range(n))
        
        while queue:
            node, state, distance = queue.popleft()
            
            # Check if we have visited all nodes
            if state == target_mask:
                return distance
            
            # Explore neighbors
            for neighbor in graph[node]:
                # Update the state to include the neighbor
                new_state = state | (1 << neighbor)
                # Check visited set for the current node and state
                if (neighbor, new_state) not in visited:
                    visited.add((neighbor, new_state))
                    queue.append((neighbor, new_state, distance + 1))
